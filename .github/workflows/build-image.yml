name: build image
on:
  push:
    branches:
      - main
      - 'swift/**'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY_IMAGE: ghcr.io/${{ github.repository }}

permissions:
  contents: read
  packages: write

# Thanks for: https://zenn.dev/till0196/articles/8efa063c953350

jobs:
  parse-docker-compose:
    runs-on: ubuntu-latest
    outputs:
      build-args: ${{ steps.parse.outputs.build-args }}
      cache-from: ${{ steps.parse.outputs.cache-from }}
      cache-to: ${{ steps.parse.outputs.cache-to }}
      platforms: ${{ steps.parse.outputs.platforms }}
    steps:
      - uses: actions/checkout@v4
      - id: parse
        run: |
          build_args=$(yq eval '.services.observant.build.args|to_entries[]|"\(.key)=\(.value)"' docker-compose.yml)
          delimiter="$(openssl rand -hex 8)"
          echo "build-args<<${delimiter}" >> $GITHUB_OUTPUT
          echo "${build_args}" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT
          use_swift_sdks=$(yq eval '.services.observant.build.args.USE_SWIFT_SDKS' docker-compose.yml)
          if [ "${GITHUB_EVENT_NAME}" = "pull_request" ]; then
            ref=${GITHUB_BASE_REF/\//-}
          else
            ref=${GITHUB_REF_NAME/\//-}
          fi
          if [ "${use_swift_sdks}" = "true" ]; then
            cache_param="type=gha,scope=${ref}-$(dpkg --print-architecture)"
          else
            cache_param="type=registry,ref=${REGISTRY_IMAGE}:cache-${ref}-$(dpkg --print-architecture)"
          fi
          echo "cache-from=${cache_param}" >> $GITHUB_OUTPUT
          echo "cache-to=${cache_param},mode=max" >> $GITHUB_OUTPUT
          platforms=$(yq -o json '.services.observant.build.platforms' docker-compose.yml | jq -c)
          echo "platforms=${platforms}" >> $GITHUB_OUTPUT

  build:
    needs: parse-docker-compose
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJSON(needs.parse-docker-compose.outputs.platforms) }}
    runs-on: ${{ endsWith(matrix.platform, 'arm64') && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update swift-sdks
        run: ./update-swift-sdks.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push digest
        id: build
        uses: docker/build-push-action@v6
        with:
          build-args: ${{ needs.parse-docker-compose.outputs.build-args }}
          cache-from: ${{ needs.parse-docker-compose.outputs.cache-from }}
          cache-to: ${{ needs.parse-docker-compose.outputs.cache-to }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          platforms: ${{ matrix.platform }}
          secrets: |
            "github_token=${{ secrets.GITHUB_TOKEN }}"

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ runner.arch }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    needs:
      - build
    steps:
      - name: Download digest
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          flavor: |
            latest=false
          tags: |
            type=match,pattern=swift/(.*),group=1,value=${{ github.ref }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,prefix=pr-,suffix=,event=pr

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}

      - name: Cleanup registry
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ github.event.repository.name }}
          package-type: container
          min-versions-to-keep: 200
          delete-only-untagged-versions: 'true'

      - name: Deploy
        if: github.event_name == 'push' && startsWith(github.ref_name, 'swift/')
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_HOST_KEY: ${{ secrets.DEPLOY_HOST_KEY }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        run: |
          [ -z "${DEPLOY_HOST}" ] && echo "Skipping deploy, no host provided" && exit 0
          [ -z "${DEPLOY_HOST_KEY}" ] && echo "Skipping deploy, no host key provided" && exit 0
          [ -z "${DEPLOY_KEY}" ] && echo "Skipping deploy, no deploy key provided" && exit 0
          ssh-agent bash <<EOF
            echo "${DEPLOY_KEY}" | ssh-add -q - &&
            ssh_args=(
              -n # no tty
              -o KnownHostsCommand="/usr/bin/env echo ${DEPLOY_HOST_KEY}" # pass the host key
              "${DEPLOY_HOST}"        # host
              bot/start               # command to deploy
              "${GITHUB_REF_NAME#*/}" # target image tag
            ) &&
            ssh "\${ssh_args[@]}"
          EOF
